<?php declare(strict_types=1);

namespace KikCMS\Services\Util;


use DateInterval;
use DateTime;
use IntlDateFormatter;
use KikCMS\Classes\Translator;
use KikCMS\Classes\Phalcon\Injectable;
use Phalcon\Filter\Validation\Validator\Date;

/**
 * Utility Service for handling DateTime objects
 *
 * @property Translator $translator
 */
class DateTimeService extends Injectable
{
    const STRFTIME_REPLACES = [
        '%a' => 'E',
        '%A' => 'EEEE',
        '%d' => 'dd',
        '%e' => 'd',
        '%j' => 'D',
        '%u' => 'e',// not 100% correct
        '%w' => 'c',// not 100% correct
        '%U' => 'w',
        '%V' => 'ww',// not 100% correct
        '%W' => 'w',// not 100% correct
        '%b' => 'MMM',
        '%B' => 'MMMM',
        '%h' => 'MMM',// alias of %b
        '%m' => 'MM',
        '%C' => 'yy',// no replace for this
        '%g' => 'yy',// no replace for this
        '%G' => 'Y',// not 100% correct
        '%y' => 'yy',
        '%Y' => 'yyyy',
        '%H' => 'HH',
        '%k' => 'H',
        '%I' => 'hh',
        '%l' => 'h',
        '%M' => 'mm',
        '%p' => 'a',
        '%P' => 'a',// no replace for this
        '%r' => 'hh:mm:ss a',
        '%R' => 'HH:mm',
        '%S' => 'ss',
        '%T' => 'HH:mm:ss',
        '%X' => 'HH:mm:ss',// no replace for this
        '%z' => 'ZZ',
        '%Z' => 'v',// no replace for this
        '%c' => 'd/M/YYYY HH:mm:ss',// Buddhist era not converted.
        '%D' => 'MM/dd/yy',
        '%F' => 'yyyy-MM-dd',
        '%s' => '',// no replace for this
        '%x' => 'd/MM/yyyy',// Buddhist era not converted.
        '%n' => "\n",
        '%t' => "\t",
        '%%' => '%',
    ];

    /**
     * @param string $pattern
     * @param mixed $datetime
     * @return string
     */
    public function format(string $pattern, mixed $datetime): string
    {
        // replace legacy strftime uses
        if(str_contains($pattern, '%')){
            foreach (self::STRFTIME_REPLACES as $search => $replace){
                $pattern = str_replace($search, $replace, $pattern);
            }
        }

        $formatter = new IntlDateFormatter($this->translator->tl('system.locale'));
        $formatter->setPattern($pattern);

        return $formatter->format($datetime);
    }

    /**
     * @param string $pattern
     * @param string $dateTimeString
     * @return string
     */
    public function formatFromStr(string $pattern, string $dateTimeString): string
    {
        return $this->format($pattern, strtotime($dateTimeString));
    }

    /**
     * Converts a date string (like 2017-12-31) to the default display format
     *
     * @param null|string $dateString
     * @return string
     */
    public function stringToDateFormat(?string $dateString): string
    {
        if ( ! $dateString) {
            return '';
        }

        return $this->formatFromStr($this->translator->tl('system.dateDisplayFormat'), $dateString);
    }

    /**
     * Converts a datetime string (like 2017-12-31 12:51) to the default display format
     *
     * @param null|string $dateTimeString
     * @return string
     */
    public function stringToDateTimeFormat(?string $dateTimeString): string
    {
        if ( ! $dateTimeString) {
            return '';
        }

        return $this->formatFromStr($this->translator->tl('system.dateTimeDisplayFormat'), $dateTimeString);
    }

    /**
     * @return Date
     */
    public function getValidator(): Date
    {
        $phpDateFormat = $this->translator->tl('system.phpDateFormat');

        return new Date([
            "format"     => $phpDateFormat,
            "allowEmpty" => true,
        ]);
    }

    /**
     * Convert a datetime string, generated by a datepicker, to DateTime
     *
     * @param string|null $dateTime
     * @return null|DateTime
     */
    public function getFromDatePickerValue(?string $dateTime): ?DateTime
    {
        if ( ! $dateTime) {
            return null;
        }

        return DateTime::createFromFormat($this->getDateFormat(), $dateTime);
    }

    /**
     * Get the date one year ago, with the first day of that month
     *
     * @return DateTime
     */
    public function getOneYearAgoFirstDayOfMonth(): DateTime
    {
        $dateTime     = (new DateTime())->sub(new DateInterval('P1Y'));
        $subtractDays = (int) $dateTime->format('d') - 1;

        $dateTime->sub(new DateInterval('P' . $subtractDays . 'D'));

        return $dateTime;
    }

    /**
     * Get the default date format for the current language
     *
     * @return string
     */
    public function getDateFormat(): string
    {
        return $this->translator->tl('system.phpDateFormat');
    }
}